CREATE TABLE Borrower (
    Rollin NUMBER PRIMARY KEY,
    NameofBook VARCHAR2(100) NOT NULL,
    DateofIssue DATE,
    Status CHAR(1) CHECK (Status IN ('I', 'R'))
);

CREATE TABLE Fine (
    Roll_no NUMBER,
    dateof DATE,
    Amt NUMBER(10,2),
    FOREIGN KEY (Roll_no) REFERENCES Borrower(Rollin)
);

INSERT INTO Borrower VALUES (101, 'Database Management', DATE '2023-10-01', 'I');
INSERT INTO Borrower VALUES (102, 'Operating Systems', DATE '2023-09-15', 'I');
INSERT INTO Borrower VALUES (103, 'Data Structures', DATE '2023-08-01', 'I');
COMMIT;

CREATE OR REPLACE PROCEDURE CalculateAllFines IS
    CURSOR overdue_books IS
        SELECT Rollin, NameofBook, DateofIssue
        FROM Borrower
        WHERE Status = 'I';

    v_current_date   DATE := SYSDATE;
    v_days           NUMBER;
    v_fine_amt       NUMBER;
BEGIN
    FOR book_record IN overdue_books LOOP
        v_days := v_current_date - book_record.DateofIssue;
        v_fine_amt := 0;

        IF v_days BETWEEN 15 AND 30 THEN
            v_fine_amt := v_days * 5;
        ELSIF v_days > 30 THEN
            v_fine_amt := (v_days - 30) * 50 + 30 * 5;
        END IF;

        IF v_fine_amt > 0 THEN
            INSERT INTO Fine (Roll_no, Date, Amt)
            VALUES (book_record.Rollin, v_current_date, v_fine_amt);
        END IF;

        UPDATE Borrower
        SET Status = 'R'
        WHERE Rollin = book_record.Rollin AND NameofBook = book_record.NameofBook;
    END LOOP;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('All fines calculated and statuses updated.');
END CalculateAllFines;

BEGIN
    CalculateAllFines;
END;

SELECT * FROM Fine;

SELECT * FROM Borrower;
